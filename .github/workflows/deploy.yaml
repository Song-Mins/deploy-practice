name: CI/CD Script

on:
  push:
    branches:
      - pull-image-cicd
    paths:
      - 'src/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3

      - name: Java 17 환경 설정
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: temurin

      - name: application.yaml 파일 생성
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YAML }}" > src/main/resources/application.yaml

      - name: Gradle 빌드 - 테스트 생략
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: 도커 이미지 빌드
        run: docker build -f docker/Dockerfile-spring -t docker.io/songker/deploy-spring:${{ github.sha }} ./build/libs

      - name: Docker Hub 에 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 이미지 푸시
        run: |
          docker push docker.io/songker/deploy-spring:${{ github.sha }}
          docker tag docker.io/songker/deploy-spring:${{ github.sha }} docker.io/songker/deploy-spring:latest
          docker push docker.io/songker/deploy-spring:latest

      - name: 네트워크 확인 + MySQL, Redis, Nginx 실행 확인
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            
            # deploy-network 네트워크 존재 확인 
            if docker network inspect deploy-network > /dev/null 2>&1; then
              echo "📢 deploy-network 네트워크 존재함"
            else
              echo "📢 deploy-network 네트워크가 존재하지 않음 - 배포 중단"
              exit 1
            fi
            
            # MySQL 컨테이너 확인 및 실행
            if [ -n "$(docker ps -q -f name=deploy-mysql)" ]; then
              echo "📢 MySQL 컨테이너 정상 실행중"
            else
              echo "📢 MySQL 컨테이너가 실행중이 아님  - 배포 중단"
              exit 1
            fi
            
            # Redis 컨테이너 확인 및 실행
            if [ -n "$(docker ps -q -f name=deploy-redis)" ]; then
              echo "📢 Redis 컨테이너 정상 실행중"
            else
              echo "📢 Redis 컨테이너가 실행중이 아님  - 배포 중단"
              exit 1
            fi
            
            # Nginx 컨테이너 확인 및 실행
            if [ -n "$(docker ps -q -f name=deploy-nginx)" ]; then
              echo "📢 Nginx 컨테이너 정상 실행중"
            else
              echo "📢 Nginx 컨테이너가 실행중이 아님  - 배포 중단"
              exit 1
            fi

      - name: EC2 서버에서 Spring 컨테이너 실행
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            
            APP_NAME="deploy-spring"
            IMAGE="docker.io/songker/deploy-spring:latest"
            NETWORK="deploy-network"
            
            # blue/green 컨테이너 이름 정의
            BLUE="${APP_NAME}-blue"
            GREEN="${APP_NAME}-green"
            
            if docker ps -q --filter "name=${BLUE}" | grep -q .; then
              CURRENT="${BLUE}"
              NEW="${GREEN}"
            elif docker ps -q --filter "name=${GREEN}" | grep -q .; then
              CURRENT="${GREEN}"
              NEW="${BLUE}"
            else
              echo "📢 기존 컨테이너 없음 → 새 컨테이너는 BLUE로 설정"
              CURRENT=""
              NEW="${BLUE}"
            fi
            
            echo "📢 기존: ${CURRENT:-없음}, 새로 띄울: $NEW"
            
            # Docker Hub 로그인 및 이미지 풀
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            docker pull $IMAGE
            
            # 새 컨테이너 실행
            docker run -d \
              --name $NEW \
              --network $NETWORK \
              $IMAGE
            
            # 헬스체크 (최대 60초)
            for i in {1..12}; do
              if docker exec $NEW curl -s http://localhost:8080/actuator/health | grep -q '"status":"UP"'; then
                echo "📢 컨테이너($NEW) 헬스체크 성공"
                break
              else
                echo "📢 헬스체크 대기 중... ($i/12)"
                sleep 5
              fi
            done
            
            if ! docker exec $NEW curl -s http://localhost:8080/actuator/health | grep -q '"status":"UP"'; then
              echo "📢 헬스체크 실패!!!!! - 컨테이너($NEW) 삭제"
              docker rm -f $NEW
              exit 1
            fi
            
            # default.conf 설정 파일 변경 - 프록시 대상 변경
            if [ -n "$CURRENT" ]; then
              docker exec deploy-nginx sed -i "s/server ${CURRENT}:8080;/server ${NEW}:8080;/" /etc/nginx/conf.d/default.conf
              docker exec deploy-nginx nginx -s reload
              echo "📢 nginx 프록시 대상 변경 - $CURRENT -> $NEW"
            fi
            
            # 기존 컨테이너 종료 및 제거 (graceful shutdown)
            if [ -n "$CURRENT" ]; then
              echo "📢 컨테이너($CURRENT)에 SIGTERM 종료 신호 전송 - 35초동안 종료되지 않으면 SIGKILL로 강제종료"
              docker stop -t 35 "$CURRENT"
              echo "📢 컨테이너($CURRENT) 제거"
              docker rm "$CURRENT"
            fi